{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Distance Calculation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0.6820045605879779, 0.09160260807956389), (0.6178163488614024, 0.8419199045509562), (0.8345502885760898, 0.5150177257913494)]\n"
     ]
    }
   ],
   "source": [
    "# Generate 1000 random positions (x, y)\n",
    "random.seed(37)\n",
    "positions = [(random.random(), random.random()) for i in range(1000)]\n",
    "print(positions[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Generate a function to compute the closest position\n",
    "def closest(position, positions):\n",
    "\n",
    "    x0, y0 = position\n",
    "    dbest, ibest = None, None # Initialize the closest distance\n",
    "\n",
    "    # Iterate over all positions in the list\n",
    "    for i, (x,y) in enumerate(positions):\n",
    "        dist = ((x - x0) ** 2) + ((y - y0) ** 2) # Compute the Euclidean Distance\n",
    "        dist = math.sqrt(dist)\n",
    "\n",
    "        if dbest is None or dist < dbest:\n",
    "            dbest, ibest = dist, i\n",
    "\n",
    "    return ibest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "774 µs ± 66.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "# Measure the execution time\n",
    "%timeit time = closest((0.5, 0.5), positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.4931887562959454, 0.5124463555963269)\n"
     ]
    }
   ],
   "source": [
    "# Find the closest distance coordinates\n",
    "closest_coordinates = positions[closest((0.5, 0.5), positions)]\n",
    "print(closest_coordinates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Distance Calculation with Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.68200456 0.09160261]\n",
      " [0.61781635 0.8419199 ]\n",
      " [0.83455029 0.51501773]]\n"
     ]
    }
   ],
   "source": [
    "# Convert the list to a NumPy array\n",
    "positions = np.array(positions)\n",
    "print(positions[:3, :])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Extract x and y coordinates from the array\n",
    "x, y = positions[:, 0], positions[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate distances from the point (0.5, 0.5)\n",
    "distances = np.sqrt((x - 0.5) ** 2 + (y - 0.5) ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.2 µs ± 3.03 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "# Measure the execution time\n",
    "%timeit time = np.sqrt((x - 0.5) ** 2 + (y - 0.5) ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.014188192570804834\n"
     ]
    }
   ],
   "source": [
    "# Find the closest distance\n",
    "closest_distance = distances.min()\n",
    "print(closest_distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
