{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Techniques for Feature Selection and Parameter Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pylab as pl\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import feature_selection\n",
    "from sklearn import metrics\n",
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pid</th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1st</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211.337494</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1st</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>female</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pid pclass  survived     sex   age  sibsp  parch        fare     embarked\n",
       "0    1    1st         1  female  29.0      0      0  211.337494  Southampton\n",
       "1    2    1st         1    male   NaN      1      2  151.550003  Southampton\n",
       "2    3    1st         0  female   2.0      1      2  151.550003  Southampton\n",
       "3    4    1st         0    male  30.0      1      2  151.550003  Southampton\n",
       "4    5    1st         0  female  25.0      1      2  151.550003  Southampton"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = \"http://facweb.cs.depaul.edu/mobasher/classes/csc478/Data/titanic-trimmed.csv\"\n",
    "titanic = pd.read_csv(url)\n",
    "titanic.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pid</th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309</td>\n",
       "      <td>1045.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1308.000000</td>\n",
       "      <td>1307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3rd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>709</td>\n",
       "      <td>NaN</td>\n",
       "      <td>843</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>655.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.381971</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.908852</td>\n",
       "      <td>0.498854</td>\n",
       "      <td>0.385027</td>\n",
       "      <td>33.295479</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>378.020061</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.486055</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.392485</td>\n",
       "      <td>1.041658</td>\n",
       "      <td>0.865560</td>\n",
       "      <td>51.758669</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.166700</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>328.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>655.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>982.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.275000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329224</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                pid pclass     survived   sex          age        sibsp  \\\n",
       "count   1309.000000   1309  1309.000000  1309  1045.000000  1309.000000   \n",
       "unique          NaN      3          NaN     2          NaN          NaN   \n",
       "top             NaN    3rd          NaN  male          NaN          NaN   \n",
       "freq            NaN    709          NaN   843          NaN          NaN   \n",
       "mean     655.000000    NaN     0.381971   NaN    29.908852     0.498854   \n",
       "std      378.020061    NaN     0.486055   NaN    14.392485     1.041658   \n",
       "min        1.000000    NaN     0.000000   NaN     0.166700     0.000000   \n",
       "25%      328.000000    NaN     0.000000   NaN    21.000000     0.000000   \n",
       "50%      655.000000    NaN     0.000000   NaN    28.000000     0.000000   \n",
       "75%      982.000000    NaN     1.000000   NaN    39.000000     1.000000   \n",
       "max     1309.000000    NaN     1.000000   NaN    80.000000     8.000000   \n",
       "\n",
       "              parch         fare     embarked  \n",
       "count   1309.000000  1308.000000         1307  \n",
       "unique          NaN          NaN            3  \n",
       "top             NaN          NaN  Southampton  \n",
       "freq            NaN          NaN          914  \n",
       "mean       0.385027    33.295479          NaN  \n",
       "std        0.865560    51.758669          NaN  \n",
       "min        0.000000     0.000000          NaN  \n",
       "25%        0.000000     7.895800          NaN  \n",
       "50%        0.000000    14.454200          NaN  \n",
       "75%        0.000000    31.275000          NaN  \n",
       "max        9.000000   512.329224          NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.describe(include = \"all\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1309, 9)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(264, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display(titanic.shape)\n",
    "titanic[titanic.age.isnull()].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1306, 9)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fill missing values\n",
    "age_mean = titanic.age.mean()\n",
    "titanic['age'] = titanic['age'].fillna(age_mean)\n",
    "titanic.dropna(axis = 0, inplace = True)\n",
    "titanic.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1st</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211.337494</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1st</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>29.908852</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>female</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>male</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1st</td>\n",
       "      <td>0</td>\n",
       "      <td>female</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>Southampton</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    pclass  survived     sex        age  sibsp  parch        fare     embarked\n",
       "pid                                                                           \n",
       "1      1st         1  female  29.000000      0      0  211.337494  Southampton\n",
       "2      1st         1    male  29.908852      1      2  151.550003  Southampton\n",
       "3      1st         0  female   2.000000      1      2  151.550003  Southampton\n",
       "4      1st         0    male  30.000000      1      2  151.550003  Southampton\n",
       "5      1st         0  female  25.000000      1      2  151.550003  Southampton"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.set_index('pid', drop = True, inplace = True)\n",
    "titanic.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survived</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>pclass_1st</th>\n",
       "      <th>pclass_2nd</th>\n",
       "      <th>pclass_3rd</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "      <th>embarked_Cherbourg</th>\n",
       "      <th>embarked_Queenstown</th>\n",
       "      <th>embarked_Southampton</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211.337494</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>29.908852</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>151.550003</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     survived        age  sibsp  parch        fare  pclass_1st  pclass_2nd  \\\n",
       "pid                                                                          \n",
       "1           1  29.000000      0      0  211.337494        True       False   \n",
       "2           1  29.908852      1      2  151.550003        True       False   \n",
       "3           0   2.000000      1      2  151.550003        True       False   \n",
       "4           0  30.000000      1      2  151.550003        True       False   \n",
       "5           0  25.000000      1      2  151.550003        True       False   \n",
       "\n",
       "     pclass_3rd  sex_female  sex_male  embarked_Cherbourg  \\\n",
       "pid                                                         \n",
       "1         False        True     False               False   \n",
       "2         False       False      True               False   \n",
       "3         False        True     False               False   \n",
       "4         False       False      True               False   \n",
       "5         False        True     False               False   \n",
       "\n",
       "     embarked_Queenstown  embarked_Southampton  \n",
       "pid                                             \n",
       "1                  False                  True  \n",
       "2                  False                  True  \n",
       "3                  False                  True  \n",
       "4                  False                  True  \n",
       "5                  False                  True  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert categorical variables to dummy variables\n",
    "titanic_ssf = pd.get_dummies(titanic)\n",
    "titanic_ssf.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_names = titanic_ssf.columns.values\n",
    "X = titanic_ssf[titanic_names[1:]]\n",
    "y = titanic_ssf['survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset into training and testing set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 33)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Decision Tree without Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize the Decision Tree Classifier\n",
    "dt = dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def measure_performance(X, y, clf, show_accuracy = True, show_classification_report = True, show_confussion_matrix = True):\n",
    "\n",
    "    y_pred = clf.predict(X)   \n",
    "    \n",
    "    if show_accuracy:\n",
    "        print(\"Accuracy\")\n",
    "        print(format(metrics.accuracy_score(y, y_pred)))\n",
    "        print()\n",
    "        \n",
    "    if show_classification_report:\n",
    "        print(\"Classification report\")\n",
    "        print(metrics.classification_report(y, y_pred))\n",
    "        print()\n",
    "      \n",
    "    if show_confussion_matrix:\n",
    "        print(\"Confussion matrix\")\n",
    "        print(metrics.confusion_matrix(y, y_pred))\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7366412213740458\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.80      0.79       161\n",
      "           1       0.66      0.64      0.65       101\n",
      "\n",
      "    accuracy                           0.74       262\n",
      "   macro avg       0.72      0.72      0.72       262\n",
      "weighted avg       0.74      0.74      0.74       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[128  33]\n",
      " [ 36  65]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Decision Tree with Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Initialize feature selection method\n",
    "fs = feature_selection.SelectPercentile(feature_selection.chi2, percentile = 30)\n",
    "\n",
    "# Fit and transform the training data to select features\n",
    "X_train_fs = fs.fit_transform(X_train, y_train)\n",
    "\n",
    "# Transform the testing data\n",
    "X_test_fs = fs.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fare  5185.44\n",
      "pclass_1st  61.98\n",
      "sex_female  189.10\n",
      "  sex_male  102.94\n"
     ]
    }
   ],
   "source": [
    "# Check if the feature was selected by the feature selection\n",
    "for i in range(len(X.columns.values)):\n",
    "    \n",
    "    if fs.get_support()[i]:\n",
    "        print(\"%10s  %3.2f\" % (X.columns.values[i], fs.scores_[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize the Decision Tree Classifier\n",
    "dt = dt.fit(X_train_fs, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.8206106870229007\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.84      0.85       161\n",
      "           1       0.76      0.78      0.77       101\n",
      "\n",
      "    accuracy                           0.82       262\n",
      "   macro avg       0.81      0.81      0.81       262\n",
      "weighted avg       0.82      0.82      0.82       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[136  25]\n",
      " [ 22  79]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test_fs, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature Selection - Finding the Best Percentile using Cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 1  0.7012\n",
      " 6  0.7012\n",
      "11  0.7615\n",
      "16  0.7615\n",
      "21  0.7615\n",
      "26  0.7615\n",
      "31  0.7586\n",
      "36  0.7586\n",
      "41  0.7672\n",
      "46  0.7643\n",
      "51  0.7643\n",
      "56  0.7586\n",
      "61  0.7576\n",
      "66  0.7490\n",
      "71  0.7500\n",
      "76  0.7529\n",
      "81  0.7567\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86  0.7586\n",
      "91  0.7615\n",
      "96  0.7510\n"
     ]
    }
   ],
   "source": [
    "percentiles = range(1, 100, 5)\n",
    "results = []\n",
    "\n",
    "for i in range(1, 100, 5):\n",
    "\n",
    "    # Initialize feature selection method\n",
    "    fs = feature_selection.SelectPercentile(feature_selection.chi2, percentile = i)\n",
    "    \n",
    "    # Fit and transform the training data to select features\n",
    "    X_train_fs = fs.fit_transform(X_train, y_train)\n",
    "\n",
    "    # Perform 5-fold cross-validation\n",
    "    scores = cross_val_score(dt, X_train_fs, y_train, cv = 5)\n",
    "\n",
    "    # Append the mean cross-validation score\n",
    "    results = np.append(results, scores.mean())\n",
    "\n",
    "    print(\"%2d  %0.4f\" % (i, scores.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Percentile of Features:41\n",
      "Optimal Number of Features:4\n"
     ]
    }
   ],
   "source": [
    "optimal_percentile_ind = np.where(results == results.max())[0][0] # Identify the index of the optimal percentile of features\n",
    "optimal_num_features = int(percentiles[optimal_percentile_ind]*len(X.columns)/100) # Calculate the optimal number of features\n",
    "\n",
    "print(\"Optimal Percentile of Features:{0}\".format(percentiles[optimal_percentile_ind]))\n",
    "print(\"Optimal Number of Features:{0}\".format(optimal_num_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1c39eb9ebe0>]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a plot\n",
    "pl.figure()\n",
    "pl.xlabel(\"Percentage of Features Selected\")\n",
    "pl.ylabel(\"Cross-validation Accuracy\")\n",
    "pl.plot(percentiles, results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate the Best Number of Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize feature selection method\n",
    "fs = feature_selection.SelectKBest(feature_selection.chi2, k = optimal_num_features)\n",
    "\n",
    "# Fit and transform the training data to select features\n",
    "X_train_fs = fs.fit_transform(X_train, y_train)\n",
    "\n",
    "# Transform the testing data\n",
    "X_test_fs = fs.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize the Decision Tree Classifier\n",
    "dt = dt.fit(X_train_fs, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.8206106870229007\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.84      0.85       161\n",
      "           1       0.76      0.78      0.77       101\n",
      "\n",
      "    accuracy                           0.82       262\n",
      "   macro avg       0.81      0.81      0.81       262\n",
      "weighted avg       0.82      0.82      0.82       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[136  25]\n",
      " [ 22  79]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test_fs, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model selection 1 - Criterion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entropy Criterion Accuracy on CV: 0.744\n",
      "Gini Criterion Accuracy on CV: 0.743\n"
     ]
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "scores = cross_val_score(dt, X_train, y_train, cv = 5) # Perform 5-fold cross-validation\n",
    "print(\"Entropy Criterion Accuracy on CV: {0:.3f}\".format(scores.mean()))\n",
    "\n",
    "dt = tree.DecisionTreeClassifier(criterion = 'gini') # Initialize a Classifier\n",
    "scores = cross_val_score(dt, X_train, y_train, cv = 5) # Perform 5-fold cross-validation\n",
    "print(\"Gini Criterion Accuracy on CV: {0:.3f}\".format(scores.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7480916030534351\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.80      0.80       161\n",
      "           1       0.68      0.66      0.67       101\n",
      "\n",
      "    accuracy                           0.75       262\n",
      "   macro avg       0.73      0.73      0.73       262\n",
      "weighted avg       0.75      0.75      0.75       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[129  32]\n",
      " [ 34  67]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model selection 2 - Max Depth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=5)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=5)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "dt.set_params(max_depth = 5) # Set the maximum depth\n",
    "dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7900763358778626\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.85      0.83       161\n",
      "           1       0.74      0.69      0.72       101\n",
      "\n",
      "    accuracy                           0.79       262\n",
      "   macro avg       0.78      0.77      0.78       262\n",
      "weighted avg       0.79      0.79      0.79       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[137  24]\n",
      " [ 31  70]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model selection 3 - Max Depth with Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_params(X, y, clf, param_values, param_name, K):\n",
    "    \n",
    "    # Convert input to arrays\n",
    "    X = np.array(X)\n",
    "    y = np.array(y)\n",
    "\n",
    "    # Initialize arrays to store training and testing scores\n",
    "    train_scores = np.zeros(len(param_values))\n",
    "    test_scores = np.zeros(len(param_values))\n",
    "    \n",
    "    for i, param_value in enumerate(param_values):\n",
    "        \n",
    "        # Set the classifier's parameter to the current value\n",
    "        clf.set_params(**{param_name:param_value})\n",
    "        \n",
    "        # Initialize arrays to store accuracy scores for each fold\n",
    "        k_train_scores = np.zeros(K)\n",
    "        k_test_scores = np.zeros(K)\n",
    "        \n",
    "        # Create a K-Fold cross-validation object\n",
    "        cv = KFold(n_splits = K, shuffle = True, random_state = 0)\n",
    "\n",
    "        j = 0\n",
    "\n",
    "        for train, test in cv.split(X):\n",
    "            \n",
    "            # Fit the classifier\n",
    "            clf.fit(X[train], y[train])\n",
    "\n",
    "            # Evaluate accuracy on both sets\n",
    "            k_train_scores[j] = clf.score(X[train], y[train])\n",
    "            k_test_scores[j] = clf.score(X[test], y[test])\n",
    "\n",
    "            j += 1\n",
    "            \n",
    "        # Store the mean accuracy scores\n",
    "        train_scores[i] = np.mean(k_train_scores)\n",
    "        test_scores[i] = np.mean(k_test_scores)\n",
    "       \n",
    "    # Create a plot\n",
    "    plt.plot(param_values, train_scores, label = 'Train', alpha = 0.4, lw = 2, c = 'b')\n",
    "    plt.plot(param_values, test_scores, label = 'Test', alpha = 0.4, lw = 2, c = 'g')\n",
    "    plt.legend(loc = 7)\n",
    "    plt.xlabel(param_name + \" values\")\n",
    "    plt.ylabel(\"Mean Cross-Validation Accuracy\")\n",
    "\n",
    "    # return the training and testing scores on each parameter value\n",
    "    return train_scores, test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate an array of values for the maximum depth of the decision tree\n",
    "md = np.linspace(1, 40, 20)\n",
    "md = np.array([int(e) for e in md])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Call the function\n",
    "train_scores, test_scores = calc_params(X_train, y_train, dt, md, 'max_depth', 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=3)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "dt.set_params(max_depth = 3) # Set the maximum depth\n",
    "dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7977099236641222\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84       161\n",
      "           1       0.75      0.71      0.73       101\n",
      "\n",
      "    accuracy                           0.80       262\n",
      "   macro avg       0.79      0.78      0.78       262\n",
      "weighted avg       0.80      0.80      0.80       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[137  24]\n",
      " [ 29  72]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model selection 4 - Min Samples Leaf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate an array of values for the minimum samples leaf of the decision tree\n",
    "msl = np.linspace(1, 30, 15)\n",
    "msl = np.array([int(e) for e in msl])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Call the function\n",
    "train_scores, test_scores = calc_params(X_train, y_train, dt, msl, 'min_samples_leaf', 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model selection 5 - Combination of Optimal Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, min_samples_leaf=21)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, min_samples_leaf=21)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=3, min_samples_leaf=21)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "dt.set_params(min_samples_leaf = 21, max_depth = 3) # Set the parameters\n",
    "dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7786259541984732\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.82      0.82       161\n",
      "           1       0.71      0.71      0.71       101\n",
      "\n",
      "    accuracy                           0.78       262\n",
      "   macro avg       0.77      0.77      0.77       262\n",
      "weighted avg       0.78      0.78      0.78       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[132  29]\n",
      " [ 29  72]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = tree.DecisionTreeClassifier() # Initialize a Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a parameter grid for hyperparameter tuning using GridSearchCV\n",
    "parameters = {'criterion': ['entropy', 'gini'],\n",
    "              'max_depth': np.linspace(1, 20, 10, dtype = int),\n",
    "              'min_samples_leaf': np.linspace(1, 30, 15, dtype = int),\n",
    "              'min_samples_split': np.linspace(2, 20, 10, dtype = int)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 3000 candidates, totalling 15000 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={&#x27;criterion&#x27;: [&#x27;entropy&#x27;, &#x27;gini&#x27;],\n",
       "                         &#x27;max_depth&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 20]),\n",
       "                         &#x27;min_samples_leaf&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 30]),\n",
       "                         &#x27;min_samples_split&#x27;: array([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20])},\n",
       "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={&#x27;criterion&#x27;: [&#x27;entropy&#x27;, &#x27;gini&#x27;],\n",
       "                         &#x27;max_depth&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 20]),\n",
       "                         &#x27;min_samples_leaf&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 30]),\n",
       "                         &#x27;min_samples_split&#x27;: array([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20])},\n",
       "             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier()</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n",
       "             param_grid={'criterion': ['entropy', 'gini'],\n",
       "                         'max_depth': array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 20]),\n",
       "                         'min_samples_leaf': array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 30]),\n",
       "                         'min_samples_split': array([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20])},\n",
       "             verbose=1)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs = GridSearchCV(dt, parameters, verbose = 1, cv = 5) # Create a GridSearchCV object\n",
    "gs.fit(X_train, y_train) # Fit the GridSearchCV object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'criterion': 'entropy',\n",
       "  'max_depth': 3,\n",
       "  'min_samples_leaf': 1,\n",
       "  'min_samples_split': 2},\n",
       " 0.8122285609127715)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_parameters = gs.best_params_ # Best parameter combination that maximized the score\n",
    "best_score = gs.best_score_ # Best mean cross-validation score achieved with the best parameters\n",
    "\n",
    "best_parameters, best_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-6 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-6 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-6 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-6 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-6 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=3)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(criterion = 'entropy') # Initialize a Classifier\n",
    "dt.set_params(max_depth = 3, min_samples_leaf = 1, min_samples_split = 2) # Set the parameters\n",
    "dt.fit(X_train, y_train) # Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "0.7977099236641222\n",
      "\n",
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84       161\n",
      "           1       0.75      0.71      0.73       101\n",
      "\n",
      "    accuracy                           0.80       262\n",
      "   macro avg       0.79      0.78      0.78       262\n",
      "weighted avg       0.80      0.80      0.80       262\n",
      "\n",
      "\n",
      "Confussion matrix\n",
      "[[137  24]\n",
      " [ 29  72]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Call the function\n",
    "measure_performance(X_test, y_test, dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
