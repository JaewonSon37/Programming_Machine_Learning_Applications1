{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regression via Stochastic Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   8.33   41.      6.98    1.02  322.      2.56   37.88 -122.23]\n",
      " [   8.3    21.      6.24    0.97 2401.      2.11   37.86 -122.22]\n",
      " [   7.26   52.      8.29    1.07  496.      2.8    37.85 -122.24]\n",
      " [   5.64   52.      5.82    1.07  558.      2.55   37.85 -122.25]\n",
      " [   3.85   52.      6.28    1.08  565.      2.18   37.85 -122.25]\n",
      " [   4.04   52.      4.76    1.1   413.      2.14   37.85 -122.25]\n",
      " [   3.66   52.      4.93    0.95 1094.      2.13   37.84 -122.25]\n",
      " ...\n",
      " [   2.55   27.      5.45    1.08 1082.      2.83   39.19 -121.53]\n",
      " [   3.71   28.      6.78    1.15 1041.      3.03   39.27 -121.56]\n",
      " [   1.56   25.      5.05    1.13  845.      2.56   39.48 -121.09]\n",
      " [   2.56   18.      6.11    1.32  356.      3.12   39.49 -121.21]\n",
      " [   1.7    17.      5.21    1.12 1007.      2.33   39.43 -121.22]\n",
      " [   1.87   18.      5.33    1.17  741.      2.12   39.43 -121.32]\n",
      " [   2.39   16.      5.25    1.16 1387.      2.62   39.37 -121.24]]\n"
     ]
    }
   ],
   "source": [
    "# Fetch the dataset\n",
    "housing = fetch_california_housing()\n",
    "np.set_printoptions(precision = 2, linewidth = 120, suppress = True, edgeitems = 7)\n",
    "print(housing.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign the features to variable X and the target values to variable y\n",
    "X = housing.data\n",
    "y = housing.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset into training and testing set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 111)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stochastic Gradient Descent Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature scaling to normalize the dataset\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "X_train_scaled = scaler.transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize the SGD regressor\n",
    "sgdreg = SGDRegressor(penalty = 'l1', alpha = 0.001, eta0 = 0.005, max_iter = 1000000)\n",
    "\n",
    "# Fit the model on the training set\n",
    "sgdreg.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Predict the target values\n",
    "train_prediction = sgdreg.predict(X_train_scaled)\n",
    "test_prediction = sgdreg.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE on Training Data: 0.7235\n",
      "RMSE on Testing Data: 0.7380\n"
     ]
    }
   ],
   "source": [
    "# Calculate RMSE\n",
    "rmse_train = np.sqrt(mean_squared_error(train_prediction, y_train))\n",
    "rmse_test = np.sqrt(mean_squared_error(test_prediction, y_test))\n",
    "\n",
    "print('RMSE on Training Data: %.4f' %rmse_train)\n",
    "print('RMSE on Testing Data: %.4f' %rmse_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
