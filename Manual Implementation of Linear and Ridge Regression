{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Manual Implementation of Linear and Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fetch the dataset\n",
    "housing = fetch_california_housing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign the features to variable X and the target values to variable y\n",
    "X = housing.data\n",
    "y = housing.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset into training and testing set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 111)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def linear_regression(X, y):\n",
    "\n",
    "    # Convert arrays to matrix\n",
    "    x_matrix = np.mat(X)\n",
    "    y_matrix = np.mat(y).T\n",
    "\n",
    "    # Calculate the matrix product of x_matrix transpose and x_matrix\n",
    "    x_transpose_x = x_matrix.T * x_matrix\n",
    "\n",
    "    # Check if the matrix is singular\n",
    "    if np.linalg.det(x_transpose_x) == 0.0:\n",
    "        print(\"This matrix can't be inversed because it is singular.\")\n",
    "        return\n",
    "    \n",
    "    # Calculate the weights using the normal equation\n",
    "    weights = x_transpose_x.I * (x_matrix.T * y_matrix)\n",
    "\n",
    "    return weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 5.13010039e-01]\n",
      " [ 1.57617207e-02]\n",
      " [-1.77150274e-01]\n",
      " [ 8.44924047e-01]\n",
      " [ 6.35747881e-06]\n",
      " [-4.28778622e-03]\n",
      " [-6.36417425e-02]\n",
      " [-1.62239409e-02]]\n"
     ]
    }
   ],
   "source": [
    "weights_linear = linear_regression(X_train, y_train)\n",
    "print(weights_linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert arrays to matrix\n",
    "x_test_matrix = np.mat(X_test)\n",
    "y_test_matrix = np.mat(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction Value:\n",
      "[[1.52369599]\n",
      " [0.96189129]\n",
      " [1.63479713]\n",
      " [2.08756467]\n",
      " [2.02727503]\n",
      " [3.48663921]\n",
      " [1.38010936]\n",
      " [1.45120831]\n",
      " [1.69881166]\n",
      " [1.23285285]]\n",
      "\n",
      "Actual Value:\n",
      "[[2.75 ]\n",
      " [0.798]\n",
      " [0.96 ]\n",
      " [0.996]\n",
      " [1.33 ]\n",
      " [3.489]\n",
      " [1.5  ]\n",
      " [1.583]\n",
      " [1.082]\n",
      " [2.262]]\n"
     ]
    }
   ],
   "source": [
    "test_prediction_linear = x_test_matrix * weights_linear\n",
    "print(\"Prediction Value:\")\n",
    "print(test_prediction_linear[0:10])\n",
    "print()\n",
    "print(\"Actual Value:\")\n",
    "print(y_test_matrix.T[0:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ridge_regression(X, y, alpha):\n",
    "\n",
    "    # Convert arrays to matrix\n",
    "    x_matrix = np.mat(X)\n",
    "    y_matrix = np.mat(y).T\n",
    "\n",
    "    # Calculate the matrix product of x_matrix transpose and x_matrix\n",
    "    x_transpose_x = x_matrix.T * x_matrix\n",
    "\n",
    "    # Calculate the denominator\n",
    "    denominator  = x_transpose_x + np.eye(np.shape(x_matrix)[1]) * alpha\n",
    "\n",
    "    # Check if the matrix is singular\n",
    "    if np.linalg.det(denominator) == 0.0:\n",
    "        print(\"This matrix is singular, cannot do inverse\")\n",
    "        return\n",
    "    \n",
    "    # Calculate the weights using the ridge regression formula\n",
    "    weights = denominator.I * (x_matrix.T * y_matrix)\n",
    "\n",
    "    return weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 5.13009505e-01]\n",
      " [ 1.57617253e-02]\n",
      " [-1.77149289e-01]\n",
      " [ 8.44918972e-01]\n",
      " [ 6.35749431e-06]\n",
      " [-4.28778469e-03]\n",
      " [-6.36418803e-02]\n",
      " [-1.62239997e-02]]\n"
     ]
    }
   ],
   "source": [
    "weights_ridge = ridge_regression(X_train, y_train, 0.003)\n",
    "print(weights_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction Value:\n",
      "[[1.52369384]\n",
      " [0.9618907 ]\n",
      " [1.63479795]\n",
      " [2.08756523]\n",
      " [2.02727491]\n",
      " [3.48663982]\n",
      " [1.38010887]\n",
      " [1.45120929]\n",
      " [1.69881102]\n",
      " [1.23285293]]\n",
      "\n",
      "Actual Value:\n",
      "[[2.75 ]\n",
      " [0.798]\n",
      " [0.96 ]\n",
      " [0.996]\n",
      " [1.33 ]\n",
      " [3.489]\n",
      " [1.5  ]\n",
      " [1.583]\n",
      " [1.082]\n",
      " [2.262]]\n"
     ]
    }
   ],
   "source": [
    "test_prediction_ridge = x_test_matrix * weights_ridge\n",
    "print(\"Prediction Value:\")\n",
    "print(test_prediction_ridge[0:10])\n",
    "print()\n",
    "print(\"Actual Value:\")\n",
    "print(y_test_matrix.T[0:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
